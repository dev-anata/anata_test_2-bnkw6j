# Kubernetes Deployment manifest for the Data Processing Pipeline Scheduler
# Version: 1.0.0
# Purpose: Manages task scheduling and coordination for data processing operations
# Dependencies: 
# - app-config ConfigMap
# - app-secrets Secret
# - scheduler-sa ServiceAccount

apiVersion: apps/v1
kind: Deployment
metadata:
  name: scheduler
  namespace: ${namespace}
  labels:
    app: data-processing-pipeline
    component: scheduler
    tier: backend
    managed-by: kustomize
  annotations:
    description: "Task scheduler component for data processing pipeline"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"

spec:
  # High availability configuration with 2 replicas
  replicas: 2
  
  # Zero-downtime deployment strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  # Pod selector configuration
  selector:
    matchLabels:
      app: data-processing-pipeline
      component: scheduler
  
  template:
    metadata:
      labels:
        app: data-processing-pipeline
        component: scheduler
      annotations:
        checksum/config: ${CONFIG_CHECKSUM}
        co.elastic.logs/enabled: "true"
    
    spec:
      # Security configuration
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      serviceAccountName: scheduler-sa
      
      # Pod scheduling configuration
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - scheduler
              topologyKey: kubernetes.io/hostname
      
      # Container configuration
      containers:
      - name: scheduler
        image: gcr.io/${project_id}/data-processing-pipeline/scheduler:${tag}
        imagePullPolicy: IfNotPresent
        
        # Resource allocation based on performance requirements
        resources:
          requests:
            cpu: "500m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "1Gi"
        
        # Environment configuration
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        
        # Container ports
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Health monitoring
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Security context for container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Volume mounts for temporary data
        volumeMounts:
        - name: tmp
          mountPath: /tmp
          readOnly: false
      
      # Volumes configuration
      volumes:
      - name: tmp
        emptyDir: {}
      
      # Pod termination configuration
      terminationGracePeriodSeconds: 60
      
      # Image pull configuration
      imagePullSecrets:
      - name: gcr-secret