apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker-deployment
  namespace: ${namespace}
  labels:
    app: data-processing-pipeline
    component: worker
    tier: backend
    environment: ${environment}
spec:
  # Minimum 5 replicas as per Technical Specifications/8.4.2
  replicas: 5
  selector:
    matchLabels:
      app: data-processing-pipeline
      component: worker
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: data-processing-pipeline
        component: worker
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      # Security context for non-root execution as per security controls
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: worker
        image: gcr.io/${project_id}/data-processing-pipeline:${tag}
        imagePullPolicy: IfNotPresent
        command: ["python", "-m", "tasks.worker"]
        # Resource limits as per Technical Specifications/4.5.3
        resources:
          requests:
            cpu: "500m"
            memory: "512Mi"
          limits:
            cpu: "2"
            memory: "2Gi"
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        # Environment configuration from ConfigMap and Secrets
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        # Health monitoring probes
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/readiness
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        # Security context for container level
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: worker-cache
          mountPath: /app/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: worker-cache
        emptyDir: {}
      # Ensure pods are distributed across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - worker
              topologyKey: kubernetes.io/hostname
      # Terminate gracefully
      terminationGracePeriodSeconds: 60